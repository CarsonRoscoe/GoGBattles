import { Provider, TransactionRequest, TransactionResponse } from '@ethersproject/abstract-provider';
import { Signer } from '@ethersproject/abstract-signer';
import { Bytes } from '@ethersproject/bytes';
import { Deferrable } from '@ethersproject/properties';
import { Relayer, Speed, RelayerParams } from '../relayer';
export declare type DefenderTransactionRequest = TransactionRequest & Partial<{
    speed: Speed;
    validUntil: Date | string;
}>;
export declare type DefenderRelaySignerOptions = Partial<Pick<TransactionRequest, 'gasPrice'> & {
    speed: Speed;
    validForSeconds: number;
}>;
export declare class DefenderRelaySigner extends Signer {
    readonly relayerCredentials: RelayerParams | Relayer;
    readonly provider: Provider;
    readonly options: DefenderRelaySignerOptions;
    private readonly relayer;
    private address?;
    constructor(relayerCredentials: RelayerParams | Relayer, provider: Provider, options?: DefenderRelaySignerOptions);
    getAddress(): Promise<string>;
    signMessage(message: string | Bytes): Promise<string>;
    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    connect(provider: Provider): Signer;
    sendTransaction(transaction: Deferrable<DefenderTransactionRequest>): Promise<TransactionResponse>;
    populateTransaction(transaction: Deferrable<DefenderTransactionRequest>): Promise<DefenderTransactionRequest>;
    checkTransaction(transaction: Deferrable<DefenderTransactionRequest>): Deferrable<DefenderTransactionRequest>;
}
//# sourceMappingURL=signer.d.ts.map