import { AutotaskRelayerParams, IRelayer, JsonRpcRequest, JsonRpcResponse, ListTransactionsRequest, RelayerModel, RelayerTransaction, RelayerTransactionPayload, SignedMessagePayload, SignMessagePayload } from '../relayer';
import { BaseAutotaskClient } from 'defender-base-client/lib/autotask';
export declare type SendTxRequest = {
    action: 'send-tx';
    payload: RelayerTransactionPayload;
};
export declare type GetTxRequest = {
    action: 'get-tx';
    payload: string;
};
export declare type SignRequest = {
    action: 'sign';
    payload: SignMessagePayload;
};
export declare type GetSelfRequest = {
    action: 'get-self';
};
export declare type JsonRpcCallRequest = {
    action: 'json-rpc-query';
    payload: JsonRpcRequest;
};
export declare type Request = SendTxRequest | GetTxRequest | SignRequest | GetSelfRequest | JsonRpcCallRequest;
export declare class AutotaskRelayer extends BaseAutotaskClient implements IRelayer {
    private jsonRpcRequestNextId;
    constructor(params: AutotaskRelayerParams);
    sendTransaction(payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionById(transactionId: string, txPayload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionByNonce(nonce: number, txPayload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    getRelayer(): Promise<RelayerModel>;
    query(id: string): Promise<RelayerTransaction>;
    list(criteria?: ListTransactionsRequest): Promise<RelayerTransaction[]>;
    sign(payload: SignMessagePayload): Promise<SignedMessagePayload>;
    call(method: string, params: string[]): Promise<JsonRpcResponse>;
}
//# sourceMappingURL=index.d.ts.map