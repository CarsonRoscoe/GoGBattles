"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relayer = exports.isRelayer = void 0;
const api_1 = require("./api");
function isAutotaskCredentials(credentials) {
    const autotaskCredentials = credentials;
    return !!autotaskCredentials.credentials;
}
function isApiCredentials(credentials) {
    const apiCredentials = credentials;
    return !!apiCredentials.apiKey && !!apiCredentials.apiSecret;
}
function validatePayload(payload) {
    if (payload.speed && payload.gasPrice) {
        throw new Error("Both tx's speed and gas price are set. Only set one of them.");
    }
    if (payload.validUntil && new Date(payload.validUntil).getTime() < new Date().getTime()) {
        throw new Error('The validUntil time cannot be in the past');
    }
}
function isRelayer(params) {
    return typeof params === 'object' && !!params.getRelayer;
}
exports.isRelayer = isRelayer;
class Relayer {
    constructor(credentials) {
        if (isAutotaskCredentials(credentials)) {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const { AutotaskRelayer } = require('./autotask');
            this.relayer = new AutotaskRelayer(credentials);
        }
        else if (isApiCredentials(credentials)) {
            this.relayer = new api_1.ApiRelayer(credentials);
        }
        else {
            throw new Error(`Missing credentials for creating a Relayer instance. If you are running this code in an Autotask, make sure you pass the "credentials" parameter from the handler to the Relayer constructor. If you are running this on your own process, then pass an object with the "apiKey" and "apiSecret" generated by the relayer.`);
        }
    }
    getRelayer() {
        return this.relayer.getRelayer();
    }
    sign(payload) {
        return this.relayer.sign(payload);
    }
    sendTransaction(payload) {
        validatePayload(payload);
        return this.relayer.sendTransaction(payload);
    }
    replaceTransactionById(id, payload) {
        validatePayload(payload);
        return this.relayer.replaceTransactionById(id, payload);
    }
    replaceTransactionByNonce(nonce, payload) {
        validatePayload(payload);
        return this.relayer.replaceTransactionByNonce(nonce, payload);
    }
    query(id) {
        return this.relayer.query(id);
    }
    list(criteria) {
        return this.relayer.list(criteria);
    }
    call(method, params) {
        return this.relayer.call(method, params);
    }
}
exports.Relayer = Relayer;
