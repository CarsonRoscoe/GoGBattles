import { AbstractProvider } from 'web3-core';
import { JsonRpcPayload, JsonRpcResponse } from 'web3-core-helpers';
import { BigUInt, Relayer, RelayerParams, Speed } from '../relayer';
declare type Web3Callback = (error: Error | null, result?: JsonRpcResponse) => void;
export declare type DefenderRelaySenderOptions = Partial<{
    gasPrice: BigUInt;
    speed: Speed;
    validForSeconds: number;
}>;
export declare class DefenderRelaySenderProvider {
    protected base: AbstractProvider;
    protected options: DefenderRelaySenderOptions;
    protected relayer: Relayer;
    protected id: number;
    protected txHashToId: Map<string, string>;
    private address;
    constructor(base: AbstractProvider, relayerCredentials: RelayerParams | Relayer, options?: DefenderRelaySenderOptions);
    get connected(): boolean | undefined;
    getTransactionId(hash: string): string | undefined;
    protected getAddress(): Promise<string>;
    sendAsync(payload: JsonRpcPayload, callback: Web3Callback): void;
    send(payload: JsonRpcPayload, callback: Web3Callback): void;
    protected _getAccounts(params: any[]): Promise<string[]>;
    protected _sendTransaction(params: any[]): Promise<string>;
    protected _signMessage(params: any[]): Promise<string>;
    protected _delegateToProvider(provider: any): void;
}
export {};
//# sourceMappingURL=sender.d.ts.map